System.register(['angular2/core', './platform_location', 'angular2/src/platform/dom/dom_adapter'], function(exports_1, context_1) {
    "use strict";
    var __moduleName = context_1 && context_1.id;
    var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = (this && this.__metadata) || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var core_1, platform_location_1, dom_adapter_1;
    var BrowserPlatformLocation;
    return {
        setters:[
            function (core_1_1) {
                core_1 = core_1_1;
            },
            function (platform_location_1_1) {
                platform_location_1 = platform_location_1_1;
            },
            function (dom_adapter_1_1) {
                dom_adapter_1 = dom_adapter_1_1;
            }],
        execute: function() {
            /**
             * `PlatformLocation` encapsulates all of the direct calls to platform APIs.
             * This class should not be used directly by an application developer. Instead, use
             * {@link Location}.
             */
            let BrowserPlatformLocation = class BrowserPlatformLocation extends platform_location_1.PlatformLocation {
                constructor() {
                    super();
                    this._init();
                }
                // This is moved to its own method so that `MockPlatformLocationStrategy` can overwrite it
                /** @internal */
                _init() {
                    this._location = dom_adapter_1.DOM.getLocation();
                    this._history = dom_adapter_1.DOM.getHistory();
                }
                /** @internal */
                get location() { return this._location; }
                getBaseHrefFromDOM() { return dom_adapter_1.DOM.getBaseHref(); }
                onPopState(fn) {
                    dom_adapter_1.DOM.getGlobalEventTarget('window').addEventListener('popstate', fn, false);
                }
                onHashChange(fn) {
                    dom_adapter_1.DOM.getGlobalEventTarget('window').addEventListener('hashchange', fn, false);
                }
                get pathname() { return this._location.pathname; }
                get search() { return this._location.search; }
                get hash() { return this._location.hash; }
                set pathname(newPath) { this._location.pathname = newPath; }
                pushState(state, title, url) {
                    this._history.pushState(state, title, url);
                }
                replaceState(state, title, url) {
                    this._history.replaceState(state, title, url);
                }
                forward() { this._history.forward(); }
                back() { this._history.back(); }
            };
            BrowserPlatformLocation = __decorate([
                core_1.Injectable(), 
                __metadata('design:paramtypes', [])
            ], BrowserPlatformLocation);
            exports_1("BrowserPlatformLocation", BrowserPlatformLocation);
        }
    }
});
//# sourceMappingURL=browser_platform_location.js.map