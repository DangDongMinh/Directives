System.register(['angular2/src/facade/lang', 'angular2/src/facade/exceptions', 'angular2/src/facade/collection', './url_parser'], function(exports_1, context_1) {
    "use strict";
    var __moduleName = context_1 && context_1.id;
    var lang_1, exceptions_1, collection_1, url_parser_1;
    var TouchMap, ContinuationSegment, StaticSegment, DynamicSegment, StarSegment, paramMatcher, wildcardMatcher, RESERVED_CHARS, PathRecognizer;
    function normalizeString(obj) {
        if (lang_1.isBlank(obj)) {
            return null;
        }
        else {
            return obj.toString();
        }
    }
    function parsePathString(route) {
        // normalize route as not starting with a "/". Recognition will
        // also normalize.
        if (route.startsWith("/")) {
            route = route.substring(1);
        }
        var segments = splitBySlash(route);
        var results = [];
        var specificity = '';
        // a single slash (or "empty segment" is as specific as a static segment
        if (segments.length == 0) {
            specificity += '2';
        }
        // The "specificity" of a path is used to determine which route is used when multiple routes match
        // a URL. Static segments (like "/foo") are the most specific, followed by dynamic segments (like
        // "/:id"). Star segments add no specificity. Segments at the start of the path are more specific
        // than proceeding ones.
        //
        // The code below uses place values to combine the different types of segments into a single
        // string that we can sort later. Each static segment is marked as a specificity of "2," each
        // dynamic segment is worth "1" specificity, and stars are worth "0" specificity.
        var limit = segments.length - 1;
        for (var i = 0; i <= limit; i++) {
            var segment = segments[i], match;
            if (lang_1.isPresent(match = lang_1.RegExpWrapper.firstMatch(paramMatcher, segment))) {
                results.push(new DynamicSegment(match[1]));
                specificity += '1';
            }
            else if (lang_1.isPresent(match = lang_1.RegExpWrapper.firstMatch(wildcardMatcher, segment))) {
                results.push(new StarSegment(match[1]));
                specificity += '0';
            }
            else if (segment == '...') {
                if (i < limit) {
                    throw new exceptions_1.BaseException(`Unexpected "..." before the end of the path for "${route}".`);
                }
                results.push(new ContinuationSegment());
            }
            else {
                results.push(new StaticSegment(segment));
                specificity += '2';
            }
        }
        return { 'segments': results, 'specificity': specificity };
    }
    // this function is used to determine whether a route config path like `/foo/:id` collides with
    // `/foo/:name`
    function pathDslHash(segments) {
        return segments.map((segment) => {
            if (segment instanceof StarSegment) {
                return '*';
            }
            else if (segment instanceof ContinuationSegment) {
                return '...';
            }
            else if (segment instanceof DynamicSegment) {
                return ':';
            }
            else if (segment instanceof StaticSegment) {
                return segment.path;
            }
        })
            .join('/');
    }
    function splitBySlash(url) {
        return url.split('/');
    }
    function assertPath(path) {
        if (lang_1.StringWrapper.contains(path, '#')) {
            throw new exceptions_1.BaseException(`Path "${path}" should not include "#". Use "HashLocationStrategy" instead.`);
        }
        var illegalCharacter = lang_1.RegExpWrapper.firstMatch(RESERVED_CHARS, path);
        if (lang_1.isPresent(illegalCharacter)) {
            throw new exceptions_1.BaseException(`Path "${path}" contains "${illegalCharacter[0]}" which is not allowed in a route config.`);
        }
    }
    return {
        setters:[
            function (lang_1_1) {
                lang_1 = lang_1_1;
            },
            function (exceptions_1_1) {
                exceptions_1 = exceptions_1_1;
            },
            function (collection_1_1) {
                collection_1 = collection_1_1;
            },
            function (url_parser_1_1) {
                url_parser_1 = url_parser_1_1;
            }],
        execute: function() {
            class TouchMap {
                constructor(map) {
                    this.map = {};
                    this.keys = {};
                    if (lang_1.isPresent(map)) {
                        collection_1.StringMapWrapper.forEach(map, (value, key) => {
                            this.map[key] = lang_1.isPresent(value) ? value.toString() : null;
                            this.keys[key] = true;
                        });
                    }
                }
                get(key) {
                    collection_1.StringMapWrapper.delete(this.keys, key);
                    return this.map[key];
                }
                getUnused() {
                    var unused = {};
                    var keys = collection_1.StringMapWrapper.keys(this.keys);
                    keys.forEach(key => unused[key] = collection_1.StringMapWrapper.get(this.map, key));
                    return unused;
                }
            }
            class ContinuationSegment {
                constructor() {
                    this.name = '';
                }
                generate(params) { return ''; }
                match(path) { return true; }
            }
            class StaticSegment {
                constructor(path) {
                    this.path = path;
                    this.name = '';
                }
                match(path) { return path == this.path; }
                generate(params) { return this.path; }
            }
            class DynamicSegment {
                constructor(name) {
                    this.name = name;
                }
                match(path) { return path.length > 0; }
                generate(params) {
                    if (!collection_1.StringMapWrapper.contains(params.map, this.name)) {
                        throw new exceptions_1.BaseException(`Route generator for '${this.name}' was not included in parameters passed.`);
                    }
                    return normalizeString(params.get(this.name));
                }
            }
            class StarSegment {
                constructor(name) {
                    this.name = name;
                }
                match(path) { return true; }
                generate(params) { return normalizeString(params.get(this.name)); }
            }
            paramMatcher = /^:([^\/]+)$/g;
            wildcardMatcher = /^\*([^\/]+)$/g;
            RESERVED_CHARS = lang_1.RegExpWrapper.create('//|\\(|\\)|;|\\?|=');
            /**
             * Parses a URL string using a given matcher DSL, and generates URLs from param maps
             */
            class PathRecognizer {
                constructor(path) {
                    this.path = path;
                    this.terminal = true;
                    assertPath(path);
                    var parsed = parsePathString(path);
                    this._segments = parsed['segments'];
                    this.specificity = parsed['specificity'];
                    this.hash = pathDslHash(this._segments);
                    var lastSegment = this._segments[this._segments.length - 1];
                    this.terminal = !(lastSegment instanceof ContinuationSegment);
                }
                recognize(beginningSegment) {
                    var nextSegment = beginningSegment;
                    var currentSegment;
                    var positionalParams = {};
                    var captured = [];
                    for (var i = 0; i < this._segments.length; i += 1) {
                        var segment = this._segments[i];
                        currentSegment = nextSegment;
                        if (segment instanceof ContinuationSegment) {
                            break;
                        }
                        if (lang_1.isPresent(currentSegment)) {
                            // the star segment consumes all of the remaining URL, including matrix params
                            if (segment instanceof StarSegment) {
                                positionalParams[segment.name] = currentSegment.toString();
                                captured.push(currentSegment.toString());
                                nextSegment = null;
                                break;
                            }
                            captured.push(currentSegment.path);
                            if (segment instanceof DynamicSegment) {
                                positionalParams[segment.name] = currentSegment.path;
                            }
                            else if (!segment.match(currentSegment.path)) {
                                return null;
                            }
                            nextSegment = currentSegment.child;
                        }
                        else if (!segment.match('')) {
                            return null;
                        }
                    }
                    if (this.terminal && lang_1.isPresent(nextSegment)) {
                        return null;
                    }
                    var urlPath = captured.join('/');
                    var auxiliary;
                    var urlParams;
                    var allParams;
                    if (lang_1.isPresent(currentSegment)) {
                        // If this is the root component, read query params. Otherwise, read matrix params.
                        var paramsSegment = beginningSegment instanceof url_parser_1.RootUrl ? beginningSegment : currentSegment;
                        allParams = lang_1.isPresent(paramsSegment.params) ?
                            collection_1.StringMapWrapper.merge(paramsSegment.params, positionalParams) :
                            positionalParams;
                        urlParams = url_parser_1.serializeParams(paramsSegment.params);
                        auxiliary = currentSegment.auxiliary;
                    }
                    else {
                        allParams = positionalParams;
                        auxiliary = [];
                        urlParams = [];
                    }
                    return { urlPath: urlPath, urlParams: urlParams, allParams: allParams, auxiliary: auxiliary, nextSegment: nextSegment };
                }
                generate(params) {
                    var paramTokens = new TouchMap(params);
                    var path = [];
                    for (var i = 0; i < this._segments.length; i++) {
                        let segment = this._segments[i];
                        if (!(segment instanceof ContinuationSegment)) {
                            path.push(segment.generate(paramTokens));
                        }
                    }
                    var urlPath = path.join('/');
                    var nonPositionalParams = paramTokens.getUnused();
                    var urlParams = url_parser_1.serializeParams(nonPositionalParams);
                    return { urlPath: urlPath, urlParams: urlParams };
                }
            }
            exports_1("PathRecognizer", PathRecognizer);
        }
    }
});
//# sourceMappingURL=path_recognizer.js.map