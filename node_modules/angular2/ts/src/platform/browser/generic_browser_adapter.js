System.register(['angular2/src/facade/collection', 'angular2/src/facade/lang', 'angular2/src/platform/dom/dom_adapter', 'angular2/src/platform/browser/xhr_impl'], function(exports_1, context_1) {
    "use strict";
    var __moduleName = context_1 && context_1.id;
    var collection_1, lang_1, dom_adapter_1, xhr_impl_1;
    var GenericBrowserDomAdapter;
    return {
        setters:[
            function (collection_1_1) {
                collection_1 = collection_1_1;
            },
            function (lang_1_1) {
                lang_1 = lang_1_1;
            },
            function (dom_adapter_1_1) {
                dom_adapter_1 = dom_adapter_1_1;
            },
            function (xhr_impl_1_1) {
                xhr_impl_1 = xhr_impl_1_1;
            }],
        execute: function() {
            /**
             * Provides DOM operations in any browser environment.
             */
            class GenericBrowserDomAdapter extends dom_adapter_1.DomAdapter {
                constructor() {
                    super();
                    this._animationPrefix = null;
                    this._transitionEnd = null;
                    try {
                        var element = this.createElement('div', this.defaultDoc());
                        if (lang_1.isPresent(this.getStyle(element, 'animationName'))) {
                            this._animationPrefix = '';
                        }
                        else {
                            var domPrefixes = ['Webkit', 'Moz', 'O', 'ms'];
                            for (var i = 0; i < domPrefixes.length; i++) {
                                if (lang_1.isPresent(this.getStyle(element, domPrefixes[i] + 'AnimationName'))) {
                                    this._animationPrefix = '-' + domPrefixes[i].toLowerCase() + '-';
                                    break;
                                }
                            }
                        }
                        var transEndEventNames = {
                            WebkitTransition: 'webkitTransitionEnd',
                            MozTransition: 'transitionend',
                            OTransition: 'oTransitionEnd otransitionend',
                            transition: 'transitionend'
                        };
                        collection_1.StringMapWrapper.forEach(transEndEventNames, (value, key) => {
                            if (lang_1.isPresent(this.getStyle(element, key))) {
                                this._transitionEnd = value;
                            }
                        });
                    }
                    catch (e) {
                        this._animationPrefix = null;
                        this._transitionEnd = null;
                    }
                }
                getXHR() { return xhr_impl_1.XHRImpl; }
                getDistributedNodes(el) { return el.getDistributedNodes(); }
                resolveAndSetHref(el, baseUrl, href) {
                    el.href = href == null ? baseUrl : baseUrl + '/../' + href;
                }
                supportsDOMEvents() { return true; }
                supportsNativeShadowDOM() {
                    return lang_1.isFunction(this.defaultDoc().body.createShadowRoot);
                }
                getAnimationPrefix() {
                    return lang_1.isPresent(this._animationPrefix) ? this._animationPrefix : "";
                }
                getTransitionEnd() { return lang_1.isPresent(this._transitionEnd) ? this._transitionEnd : ""; }
                supportsAnimation() {
                    return lang_1.isPresent(this._animationPrefix) && lang_1.isPresent(this._transitionEnd);
                }
            }
            exports_1("GenericBrowserDomAdapter", GenericBrowserDomAdapter);
        }
    }
});
//# sourceMappingURL=generic_browser_adapter.js.map