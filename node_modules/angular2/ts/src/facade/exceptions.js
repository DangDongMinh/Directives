System.register(['./exception_handler'], function(exports_1, context_1) {
    "use strict";
    var __moduleName = context_1 && context_1.id;
    var exception_handler_1;
    var BaseException, WrappedException;
    function makeTypeError(message) {
        return new TypeError(message);
    }
    exports_1("makeTypeError", makeTypeError);
    function unimplemented() {
        throw new BaseException('unimplemented');
    }
    exports_1("unimplemented", unimplemented);
    return {
        setters:[
            function (exception_handler_1_1) {
                exception_handler_1 = exception_handler_1_1;
                exports_1({
                    "ExceptionHandler": exception_handler_1_1["ExceptionHandler"]
                });
            }],
        execute: function() {
            class BaseException extends Error {
                constructor(message = "--") {
                    super(message);
                    this.message = message;
                    this.stack = (new Error(message)).stack;
                }
                toString() { return this.message; }
            }
            exports_1("BaseException", BaseException);
            /**
             * Wraps an exception and provides additional context or information.
             */
            class WrappedException extends Error {
                constructor(_wrapperMessage, _originalException, _originalStack, _context) {
                    super(_wrapperMessage);
                    this._wrapperMessage = _wrapperMessage;
                    this._originalException = _originalException;
                    this._originalStack = _originalStack;
                    this._context = _context;
                    this._wrapperStack = (new Error(_wrapperMessage)).stack;
                }
                get wrapperMessage() { return this._wrapperMessage; }
                get wrapperStack() { return this._wrapperStack; }
                get originalException() { return this._originalException; }
                get originalStack() { return this._originalStack; }
                get context() { return this._context; }
                get message() { return exception_handler_1.ExceptionHandler.exceptionToString(this); }
                toString() { return this.message; }
            }
            exports_1("WrappedException", WrappedException);
        }
    }
});
//# sourceMappingURL=exceptions.js.map