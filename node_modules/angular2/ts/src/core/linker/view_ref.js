System.register(['angular2/src/facade/exceptions'], function(exports_1, context_1) {
    "use strict";
    var __moduleName = context_1 && context_1.id;
    var exceptions_1;
    var ViewRef, HostViewRef, EmbeddedViewRef, ViewRef_, HostViewFactoryRef, HostViewFactoryRef_;
    return {
        setters:[
            function (exceptions_1_1) {
                exceptions_1 = exceptions_1_1;
            }],
        execute: function() {
            class ViewRef {
                /**
                 * @internal
                 */
                get changeDetectorRef() { return exceptions_1.unimplemented(); }
                ;
                get destroyed() { return exceptions_1.unimplemented(); }
            }
            exports_1("ViewRef", ViewRef);
            /**
             * Represents a View containing a single Element that is the Host Element of a {@link Component}
             * instance.
             *
             * A Host View is created for every dynamically created Component that was compiled on its own (as
             * opposed to as a part of another Component's Template) via {@link Compiler#compileInHost} or one
             * of the higher-level APIs: {@link AppViewManager#createRootHostView},
             * {@link AppViewManager#createHostViewInContainer}, {@link ViewContainerRef#createHostView}.
             */
            class HostViewRef extends ViewRef {
                get rootNodes() { return exceptions_1.unimplemented(); }
                ;
            }
            exports_1("HostViewRef", HostViewRef);
            /**
             * Represents an Angular View.
             *
             * <!-- TODO: move the next two paragraphs to the dev guide -->
             * A View is a fundamental building block of the application UI. It is the smallest grouping of
             * Elements which are created and destroyed together.
             *
             * Properties of elements in a View can change, but the structure (number and order) of elements in
             * a View cannot. Changing the structure of Elements can only be done by inserting, moving or
             * removing nested Views via a {@link ViewContainerRef}. Each View can contain many View Containers.
             * <!-- /TODO -->
             *
             * ### Example
             *
             * Given this template...
             *
             * ```
             * Count: {{items.length}}
             * <ul>
             *   <li *ngFor="var item of items">{{item}}</li>
             * </ul>
             * ```
             *
             * ... we have two {@link ProtoViewRef}s:
             *
             * Outer {@link ProtoViewRef}:
             * ```
             * Count: {{items.length}}
             * <ul>
             *   <template ngFor var-item [ngForOf]="items"></template>
             * </ul>
             * ```
             *
             * Inner {@link ProtoViewRef}:
             * ```
             *   <li>{{item}}</li>
             * ```
             *
             * Notice that the original template is broken down into two separate {@link ProtoViewRef}s.
             *
             * The outer/inner {@link ProtoViewRef}s are then assembled into views like so:
             *
             * ```
             * <!-- ViewRef: outer-0 -->
             * Count: 2
             * <ul>
             *   <template view-container-ref></template>
             *   <!-- ViewRef: inner-1 --><li>first</li><!-- /ViewRef: inner-1 -->
             *   <!-- ViewRef: inner-2 --><li>second</li><!-- /ViewRef: inner-2 -->
             * </ul>
             * <!-- /ViewRef: outer-0 -->
             * ```
             */
            class EmbeddedViewRef extends ViewRef {
                get rootNodes() { return exceptions_1.unimplemented(); }
                ;
            }
            exports_1("EmbeddedViewRef", EmbeddedViewRef);
            class ViewRef_ {
                constructor(_view) {
                    this._view = _view;
                    this._view = _view;
                }
                get internalView() { return this._view; }
                /**
                 * Return `ChangeDetectorRef`
                 */
                get changeDetectorRef() { return this._view.changeDetector.ref; }
                get rootNodes() { return this._view.flatRootNodes; }
                setLocal(variableName, value) { this._view.setLocal(variableName, value); }
                hasLocal(variableName) { return this._view.hasLocal(variableName); }
                get destroyed() { return this._view.destroyed; }
            }
            exports_1("ViewRef_", ViewRef_);
            class HostViewFactoryRef {
            }
            exports_1("HostViewFactoryRef", HostViewFactoryRef);
            class HostViewFactoryRef_ {
                constructor(_hostViewFactory) {
                    this._hostViewFactory = _hostViewFactory;
                }
                get internalHostViewFactory() { return this._hostViewFactory; }
            }
            exports_1("HostViewFactoryRef_", HostViewFactoryRef_);
        }
    }
});
//# sourceMappingURL=view_ref.js.map