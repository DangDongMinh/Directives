System.register(['angular2/src/facade/lang'], function(exports_1, context_1) {
    "use strict";
    var __moduleName = context_1 && context_1.id;
    var lang_1;
    var DIRECTIVE_LIFECYCLE, BINDING, DIRECTIVE, ELEMENT_PROPERTY, ELEMENT_ATTRIBUTE, ELEMENT_CLASS, ELEMENT_STYLE, TEXT_NODE, EVENT, HOST_EVENT, BindingTarget, BindingRecord;
    return {
        setters:[
            function (lang_1_1) {
                lang_1 = lang_1_1;
            }],
        execute: function() {
            DIRECTIVE_LIFECYCLE = "directiveLifecycle";
            BINDING = "native";
            DIRECTIVE = "directive";
            ELEMENT_PROPERTY = "elementProperty";
            ELEMENT_ATTRIBUTE = "elementAttribute";
            ELEMENT_CLASS = "elementClass";
            ELEMENT_STYLE = "elementStyle";
            TEXT_NODE = "textNode";
            EVENT = "event";
            HOST_EVENT = "hostEvent";
            class BindingTarget {
                constructor(mode, elementIndex, name, unit, debug) {
                    this.mode = mode;
                    this.elementIndex = elementIndex;
                    this.name = name;
                    this.unit = unit;
                    this.debug = debug;
                }
                isDirective() { return this.mode === DIRECTIVE; }
                isElementProperty() { return this.mode === ELEMENT_PROPERTY; }
                isElementAttribute() { return this.mode === ELEMENT_ATTRIBUTE; }
                isElementClass() { return this.mode === ELEMENT_CLASS; }
                isElementStyle() { return this.mode === ELEMENT_STYLE; }
                isTextNode() { return this.mode === TEXT_NODE; }
            }
            exports_1("BindingTarget", BindingTarget);
            class BindingRecord {
                constructor(mode, target, implicitReceiver, ast, setter, lifecycleEvent, directiveRecord) {
                    this.mode = mode;
                    this.target = target;
                    this.implicitReceiver = implicitReceiver;
                    this.ast = ast;
                    this.setter = setter;
                    this.lifecycleEvent = lifecycleEvent;
                    this.directiveRecord = directiveRecord;
                }
                isDirectiveLifecycle() { return this.mode === DIRECTIVE_LIFECYCLE; }
                callOnChanges() {
                    return lang_1.isPresent(this.directiveRecord) && this.directiveRecord.callOnChanges;
                }
                isDefaultChangeDetection() {
                    return lang_1.isBlank(this.directiveRecord) || this.directiveRecord.isDefaultChangeDetection();
                }
                static createDirectiveDoCheck(directiveRecord) {
                    return new BindingRecord(DIRECTIVE_LIFECYCLE, null, 0, null, null, "DoCheck", directiveRecord);
                }
                static createDirectiveOnInit(directiveRecord) {
                    return new BindingRecord(DIRECTIVE_LIFECYCLE, null, 0, null, null, "OnInit", directiveRecord);
                }
                static createDirectiveOnChanges(directiveRecord) {
                    return new BindingRecord(DIRECTIVE_LIFECYCLE, null, 0, null, null, "OnChanges", directiveRecord);
                }
                static createForDirective(ast, propertyName, setter, directiveRecord) {
                    var elementIndex = directiveRecord.directiveIndex.elementIndex;
                    var t = new BindingTarget(DIRECTIVE, elementIndex, propertyName, null, ast.toString());
                    return new BindingRecord(DIRECTIVE, t, 0, ast, setter, null, directiveRecord);
                }
                static createForElementProperty(ast, elementIndex, propertyName) {
                    var t = new BindingTarget(ELEMENT_PROPERTY, elementIndex, propertyName, null, ast.toString());
                    return new BindingRecord(BINDING, t, 0, ast, null, null, null);
                }
                static createForElementAttribute(ast, elementIndex, attributeName) {
                    var t = new BindingTarget(ELEMENT_ATTRIBUTE, elementIndex, attributeName, null, ast.toString());
                    return new BindingRecord(BINDING, t, 0, ast, null, null, null);
                }
                static createForElementClass(ast, elementIndex, className) {
                    var t = new BindingTarget(ELEMENT_CLASS, elementIndex, className, null, ast.toString());
                    return new BindingRecord(BINDING, t, 0, ast, null, null, null);
                }
                static createForElementStyle(ast, elementIndex, styleName, unit) {
                    var t = new BindingTarget(ELEMENT_STYLE, elementIndex, styleName, unit, ast.toString());
                    return new BindingRecord(BINDING, t, 0, ast, null, null, null);
                }
                static createForHostProperty(directiveIndex, ast, propertyName) {
                    var t = new BindingTarget(ELEMENT_PROPERTY, directiveIndex.elementIndex, propertyName, null, ast.toString());
                    return new BindingRecord(BINDING, t, directiveIndex, ast, null, null, null);
                }
                static createForHostAttribute(directiveIndex, ast, attributeName) {
                    var t = new BindingTarget(ELEMENT_ATTRIBUTE, directiveIndex.elementIndex, attributeName, null, ast.toString());
                    return new BindingRecord(BINDING, t, directiveIndex, ast, null, null, null);
                }
                static createForHostClass(directiveIndex, ast, className) {
                    var t = new BindingTarget(ELEMENT_CLASS, directiveIndex.elementIndex, className, null, ast.toString());
                    return new BindingRecord(BINDING, t, directiveIndex, ast, null, null, null);
                }
                static createForHostStyle(directiveIndex, ast, styleName, unit) {
                    var t = new BindingTarget(ELEMENT_STYLE, directiveIndex.elementIndex, styleName, unit, ast.toString());
                    return new BindingRecord(BINDING, t, directiveIndex, ast, null, null, null);
                }
                static createForTextNode(ast, elementIndex) {
                    var t = new BindingTarget(TEXT_NODE, elementIndex, null, null, ast.toString());
                    return new BindingRecord(BINDING, t, 0, ast, null, null, null);
                }
                static createForEvent(ast, eventName, elementIndex) {
                    var t = new BindingTarget(EVENT, elementIndex, eventName, null, ast.toString());
                    return new BindingRecord(EVENT, t, 0, ast, null, null, null);
                }
                static createForHostEvent(ast, eventName, directiveRecord) {
                    var directiveIndex = directiveRecord.directiveIndex;
                    var t = new BindingTarget(HOST_EVENT, directiveIndex.elementIndex, eventName, null, ast.toString());
                    return new BindingRecord(HOST_EVENT, t, directiveIndex, ast, null, null, directiveRecord);
                }
            }
            exports_1("BindingRecord", BindingRecord);
        }
    }
});
//# sourceMappingURL=binding_record.js.map