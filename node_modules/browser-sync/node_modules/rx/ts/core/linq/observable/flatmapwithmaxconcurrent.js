/// <reference path="../../observable.ts" />
(function () {
    var o;
    var n;
    n = o.flatMapWithMaxConcurrent(1, x => Rx.Observable.from([1, 2, 3]));
    n = o.flatMapWithMaxConcurrent(1, x => Rx.Observable.from([1, 2, 3]).toPromise());
    n = o.flatMapWithMaxConcurrent(1, x => [1, 2, 3]);
    n = o.flatMapWithMaxConcurrent(1, x => Rx.Observable.from([1, 2, 3]), (x, y) => y);
    n = o.flatMapWithMaxConcurrent(1, x => Rx.Observable.from([1, 2, 3]).toPromise(), (x, y) => y);
    n = o.flatMapWithMaxConcurrent(1, x => [1, 2, 3], (x, y) => y);
    n = o.flatMapWithMaxConcurrent(1, Rx.Observable.from([1, 2, 3]));
    n = o.flatMapWithMaxConcurrent(1, Rx.Observable.from([1, 2, 3]).toPromise());
    n = o.flatMapWithMaxConcurrent(1, [1, 2, 3]);
    n = o.flatMapWithMaxConcurrent(1, Rx.Observable.from([1, 2, 3]), (x, y) => y);
    n = o.flatMapWithMaxConcurrent(1, Rx.Observable.from([1, 2, 3]).toPromise(), (x, y) => y);
    n = o.flatMapWithMaxConcurrent(1, [1, 2, 3], (x, y) => y);
    n = o.selectManyWithMaxConcurrent(1, x => Rx.Observable.from([1, 2, 3]));
    n = o.selectManyWithMaxConcurrent(1, x => Rx.Observable.from([1, 2, 3]).toPromise());
    n = o.selectManyWithMaxConcurrent(1, x => [1, 2, 3]);
    n = o.selectManyWithMaxConcurrent(1, x => Rx.Observable.from([1, 2, 3]), (x, y) => y);
    n = o.selectManyWithMaxConcurrent(1, x => Rx.Observable.from([1, 2, 3]).toPromise(), (x, y) => y);
    n = o.selectManyWithMaxConcurrent(1, x => [1, 2, 3], (x, y) => y);
    n = o.selectManyWithMaxConcurrent(1, Rx.Observable.from([1, 2, 3]));
    n = o.selectManyWithMaxConcurrent(1, Rx.Observable.from([1, 2, 3]).toPromise());
    n = o.selectManyWithMaxConcurrent(1, [1, 2, 3]);
    n = o.selectManyWithMaxConcurrent(1, Rx.Observable.from([1, 2, 3]), (x, y) => y);
    n = o.selectManyWithMaxConcurrent(1, Rx.Observable.from([1, 2, 3]).toPromise(), (x, y) => y);
    n = o.selectManyWithMaxConcurrent(1, [1, 2, 3], (x, y) => y);
});
//# sourceMappingURL=flatmapwithmaxconcurrent.js.map